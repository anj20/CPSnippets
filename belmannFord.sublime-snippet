<snippet>
	<content><![CDATA[
vector<pair<ll,pll>>adj;// from weight,{node1,node2}
ll dist[N];
ll BellmanFord(ll src,ll V) {
  // Step 1: fill the distance array and predecessor array
  for (int i = 0; i < N; i++)dist[i] = inf;

  // Mark the source vertex
  dist[src] = 0;

  // Step 2: relax edges |V| - 1 times
  for (ll i = 0; i < V - 1; i++) {
    for (ll j = 0; j < adj.size(); j++) {
      // Get the edge data
      ll u = adj[j].sc.ft;
      ll v = adj[j].sc.sc;
      ll w = adj[j].ft;
      if (dist[u] != inf and dist[u] + w < dist[v])dist[v] = dist[u] + w;
    }
  }

  // Step 3: detect negative cycle
  // if value changes then we have a negative cycle in the graph
  // and we cannot find the shortest distances
  for (ll i = 0; i < adj.size(); i++) {
    ll u = adj[i].sc.ft;
    ll v = adj[i].sc.sc;
    ll w = adj[i].ft;
    if (dist[u] != inf and dist[u] + w < dist[v]) {
      return -1;
    }
  }

  return 1;
}

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>bellmanFord</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
