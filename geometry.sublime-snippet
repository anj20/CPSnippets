<snippet>
	<content><![CDATA[
// Point Geometry
struct P{
    ll x, y;
    void read(){
        cin>>x>>y;
    }
    P operator -(const P&b) const{
        return P{x-b.x,y-b.y};
    }
    void operator -= (const P&b){
        x-=b.x;
        y-=b.y;
    }
    ll operator *(const P&b)const{ // cross product
        return (ll)x*b.y - (ll) y*b.x;
    }
    ll angleBetween(const P&b,const P&c) const{
        return (b-*this)*(c-*this);
    }
    // 0 --> p, q and r are collinear
    // 1 --> Clockwise
    // 2 --> Counterclockwise
    int orientation(P p, P q, P r)
    {
        ll val = (q-p)*(r-q);
        if (val == 0) return 0;  // collinear
        return (val > 0)? 1: 2; // clock or counterclock wise
    } 
    /* given three points p,q,r colinear we have to check if 
       q lies on line segment pr*/
    bool onSegment(P p,P q,P r)
    {
        if((p-r)*(q-r)!=0)return false;// not coolinear
        // lies within the range of p and r then it is collinear
        if (q.x <= max(p.x, r.x) && q.x >= min(p.x, r.x) && 
           q.y <= max(p.y, r.y) && q.y >= min(p.y, r.y))return true; 

        return false;
    }
    bool line_intersection(P p1,P q1,P p2,P q2)
    {
        int o1 = orientation(p1, q1, p2); 
        int o2 = orientation(p1, q1, q2); 
        int o3 = orientation(p2, q2, p1); 
        int o4 = orientation(p2, q2, q1); 
  
        if (o1 != o2 && o3 != o4)return true; 
  
        // Special Cases 
        // p1, q1 and p2 are collinear and p2 lies on segment p1q1 
        if (o1 == 0 && onSegment(p1, p2, q1)) return true; 
  
        // p1, q1 and q2 are collinear and q2 lies on segment p1q1 
        if (o2 == 0 && onSegment(p1, q2, q1)) return true; 
  
        // p2, q2 and p1 are collinear and p1 lies on segment p2q2 
        if (o3 == 0 && onSegment(p2, p1, q2)) return true; 
  
         // p2, q2 and q1 are collinear and q1 lies on segment p2q2 
        if (o4 == 0 && onSegment(p2, q1, q2)) return true; 
  
        return false; // Doesn't fall in any of the above cases 
    }
    // jarvis_convex_hull 
    vector<P> convexHull(P points[], int n)
    {
        vector<P> hull;
        if (n < 3) return hull;
        // Find the leftmost point
        int l = 0;
        for (int i = 1; i < n; i++)if (points[i].x < points[l].x)l = i;
  
        // Start from leftmost point, keep moving counterclockwise
        // until reach the start point again.  This loop runs O(h)
        // times where h is number of points in result or output.
        int p = l, q;
        do
        {
            hull.push_back(points[p]);  
            q = (p+1)%n;
            for (int i = 0; i < n; i++)
            {
               if (orientation(points[p], points[i], points[q]) == 2)q = i;
            }
            p = q;
        } while (p != l);  // While we don't come to first point
        return hull;
    }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>geometry</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
